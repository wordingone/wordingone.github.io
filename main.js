// Main entry point - wires together all modules
import { createViewer } from './src/core/viewer.js';\nimport { loadModels, hideLoading, showError } from './src/load/loadModels.js';\nimport { buildTowerInstancedMeshes, processRegularModel } from './src/instancing/towerInstancer.js';\nimport { initLidarBoard } from './src/ui/lidarBoard.js';\nimport { createSync } from './src/sync/controller.js';\nimport models from './src/config/models.js';\n\n// Wait for DOM to be ready\ndocument.addEventListener('DOMContentLoaded', async function() {\n    console.log('Starting modular architectural system...');\n    console.log('Modules: viewer, loader, instancer, lidarBoard, sync');\n    \n    // Get DOM elements\n    const canvas = document.getElementById('canvas');\n    const loadingElement = document.getElementById('loading');\n    const lidarBoardElement = document.getElementById('lidar-board');\n    \n    // Initialize 3D viewer\n    const viewer = createViewer(canvas);\n    const { scene, render, dispose } = viewer;\n    \n    // Initialize sync controller (placeholder callbacks for now)\n    const sync = createSync({ viewer, lidar: null }); // Will connect lidar after init\n    \n    // Initialize LiDAR board with sync callbacks\n    const lidar = initLidarBoard(lidarBoardElement, {\n        onSelect: (area, hotspot) => {\n            sync.handleAreaSelect(area, hotspot);\n        },\n        onZoomExtents: () => {\n            sync.handleZoomExtents();\n        }\n    });\n    \n    try {\n        // Load all models\n        const loadedScenes = await loadModels(models, {\n            onProgress: (loaded, total, modelResult) => {\n                console.log(`Model loading progress: ${loaded}/${total} - ${modelResult.name}`);\n            },\n            onLoaded: (scenes) => {\n                console.log('All models loaded, building scene...');\n            },\n            onError: (error, modelInfo) => {\n                showError(loadingElement, `Failed to load ${modelInfo.name}: ${error.message}`);\n            }\n        });\n        \n        // Process loaded models\n        loadedScenes.forEach(modelResult => {\n            const { name, scene: modelScene, isInstanced } = modelResult;\n            \n            if (isInstanced) {\n                // Build instanced tower system\n                console.log(`Building instanced system for: ${name}`);\n                buildTowerInstancedMeshes(scene, modelScene);\n            } else {\n                // Process and add regular models\n                console.log(`Adding regular model: ${name}`);\n                processRegularModel(modelScene, name);\n                scene.add(modelScene);\n            }\n        });\n        \n        // Hide loading screen\n        hideLoading(loadingElement);\n        \n        // Initial render\n        render();\n        \n        console.log('Modular system initialization complete!');\n        \n    } catch (error) {\n        console.error('Failed to initialize system:', error);\n        showError(loadingElement, 'System initialization failed: ' + error.message);\n    }\n    \n    // Cleanup on page unload\n    window.addEventListener('beforeunload', () => {\n        console.log('Cleaning up modular system...');\n        dispose();\n    });\n});"
